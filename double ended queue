#include <stdio.h>

#define MAX_SIZE 10

int deque[MAX_SIZE];
int front = -1, rear = -1;

void insert_at_front(int item) {
    if ((front == 0 && rear == MAX_SIZE-1) || front == rear+1) {
        printf("Deque is full.\n");
        return;
    }
    if (front == -1) {
        front = rear = 0;
    } else if (front == 0) {
        front = MAX_SIZE-1;
    } else {
        front = front-1;
    }
    deque[front] = item;
}

void insert_at_rear(int item) {
    if ((front == 0 && rear == MAX_SIZE-1) || front == rear+1) {
        printf("Deque is full.\n");
        return;
    }
    if (front == -1) {
        front = rear = 0;
    } else if (rear == MAX_SIZE-1) {
        rear = 0;
    } else {
        rear = rear+1;
    }
    deque[rear] = item;
}

void delete_from_front() {
    if (front == -1) {
        printf("Deque is empty.\n");
        return;
    }
    int item = deque[front];
    if (front == rear) {
        front = rear = -1;
    } else if (front == MAX_SIZE-1) {
        front = 0;
    } else {
        front = front+1;
    }
    printf("Item deleted from front: %d\n", item);
}

void delete_from_rear() {
    if (front == -1) {
        printf("Deque is empty.\n");
        return;
    }
    int item = deque[rear];
    if (front == rear) {
        front = rear = -1;
    } else if (rear == 0) {
        rear = MAX_SIZE-1;
    } else {
        rear = rear-1;
    }
    printf("Item deleted from rear: %d\n", item);
}

int main() {
    insert_at_front(1);
    insert_at_front(2);
    insert_at_rear(3);
    insert_at_rear(4);

    delete_from_front();
    delete_from_rear();

    return 0;
}
